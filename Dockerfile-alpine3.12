# build libjq
FROM --platform=${TARGETPLATFORM:-linux/amd64} alpine:3.12 AS libjq
RUN apk --no-cache add git ca-certificates && \
    git clone https://github.com/flant/libjq-go /libjq-go && \
    cd /libjq-go && \
    git submodule update --init --recursive && \
    /libjq-go/scripts/install-libjq-dependencies-alpine.sh && \
    /libjq-go/scripts/build-libjq-static.sh /libjq-go /libjq


# build shell-operator binary
FROM --platform=${TARGETPLATFORM:-linux/amd64} golang:1.15-alpine3.12 AS shell-operator
ARG appVersion=latest
RUN apk --no-cache add git ca-certificates gcc libc-dev

# Cache-friendly download of go dependencies.
ADD go.mod go.sum /src/shell-operator/
WORKDIR /src/shell-operator
RUN go mod download

COPY --from=libjq /libjq /libjq
ADD . /src/shell-operator

RUN CGO_ENABLED=1 \
    CGO_CFLAGS="-I/libjq/include" \
    CGO_LDFLAGS="-L/libjq/lib" \
    GOOS=linux \
    go build -ldflags="-s -w -X 'github.com/flant/shell-operator/pkg/app.Version=$appVersion'" \
             -o shell-operator \
             ./cmd/shell-operator


# build final image
FROM alpine:3.12
ARG TARGETOS
ARG TARGETARCH
RUN apk --no-cache add ca-certificates jq bash gcc \
    musl-dev libffi-dev openssl-dev linux-headers python3-dev py3-pip \
    make openssl curl unzip git util-linux \
    && pip3 install --no-cache-dir psutil ansible_runner ansible==2.8.12 redis kubernetes \
    && wget https://get.helm.sh/helm-v3.3.4-${TARGETOS:-linux}-${TARGETARCH:-amd64}.tar.gz -O helm.tar.gz \
    && tar -zxf helm.tar.gz \
    && mv ${TARGETOS:-linux}-${TARGETARCH:-amd64}/helm /bin/helm \
    && rm -rf *${TARGETOS:-linux}-${TARGETARCH:-amd64}* \
    && chmod +x /bin/helm \
    && wget https://storage.googleapis.com/kubernetes-release/release/v1.19.2/bin/${TARGETOS}/${TARGETARCH}/kubectl -O /bin/kubectl \
    && chmod +x /bin/kubectl \
    && curl https://rclone.org/install.sh | bash \
    && ln -s /bin/kubectl /usr/local/bin/kubectl \
    && ln -s /bin/helm /usr/local/bin/helm \
    && mkdir -p /hooks/kubesphere /kubesphere/installer/roles \
    /kubesphere/results/env /kubesphere/playbooks /kubesphere/config \
    && adduser -D -g kubesphere -u 1002 kubesphere
ADD frameworks /
ADD shell_lib.sh /
COPY --from=shell-operator /src/shell-operator /
RUN chown -R kubesphere:kubesphere /shell-operator \
    && chown -R kubesphere:kubesphere /hooks \
    && chown -R kubesphere:kubesphere /kubesphere \
    && chown -R kubesphere:kubesphere /var/run
USER kubesphere
RUN helm plugin install https://github.com/helm/helm-2to3.git
WORKDIR /
ENV SHELL_OPERATOR_HOOKS_DIR /hooks
ENV LOG_TYPE json
ENTRYPOINT ["/shell-operator"]
CMD ["start"]
